name: ci

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest flake8 || true
      - name: Lint
        run: |
          if [ -f setup.cfg ] || [ -f .flake8 ]; then flake8 || true; fi
      - name: Unit tests
        run: |
          if compgen -G "tests/test_*.py" > /dev/null; then pytest -q || true; else echo "No tests"; fi

  docker-publish:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/demo-monitoring-app
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  smoke-check:
    needs: docker-publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Pull image
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/demo-monitoring-app:sha-${{ github.sha }}"
          docker pull "$IMAGE"
          echo "$IMAGE" > image.txt
      - name: Run container
        run: |
          IMAGE=$(cat image.txt)
          docker run -d -p 8080:8080 --name demo "$IMAGE"
          sleep 4
      - name: Health check
        run: |
          curl -fsS http://localhost:8080/healthz
          curl -fsS http://localhost:8080/version
      - name: Stop container
        if: always()
        run: docker rm -f demo || true
